#pragma kernel NeighborDebug
#pragma kernel MakeParticleGridPair
#pragma kernel Debug
#pragma kernel RearrangeParticle
#pragma kernel MakeGridLookUpTable
#pragma kernel ResetGridLookUpTable


#include "../Resources/cginc/GridConfig.cginc"
#include "../Resources/cginc/GridUtility.cginc"
#include "../Resources/cginc/DataBridge.cginc"


int _ParticleNum;
int _TargetIndex;
float _Range;
int _NeighborMode;
StructuredBuffer<Data> _ReadParticleBuffer;

RWStructuredBuffer<uint2> _ParticleGridPair;
RWStructuredBuffer<uint2> _GridTable;

// 1x1x1 neighbor search

// neighbor search with range

// neighbor search debug


[numthreads(BITONIC_BLOCK_SIZE, 1, 1)]
void NeighborDebug(uint3 id : SV_DispatchThreadID)
{
    int targetIdx = max(0, min(_TargetIndex, _ParticleNum - 1));
    if (id.x != targetIdx) return;

    float spacingX = (_BoundaryXMax - _BoundaryXMin) / (float)_GridNumX;
    float spacingY = (_BoundaryYMax - _BoundaryYMin) / (float)_GridNumY;
    float spacingZ = (_BoundaryZMax - _BoundaryZMin) / (float)_GridNumZ;

    float3 pos = _ParticleBuffer[id.x].position - float3(_BoundaryXMin, _BoundaryYMin, _BoundaryZMin);
    int3 grid = (int3) PositionToGrid(_ParticleBuffer[id.x].position, float3(spacingX, spacingY, spacingZ), float3(_BoundaryXMin, _BoundaryYMin, _BoundaryZMin));

    float gxMin = grid.x * spacingX;
    float gxMax = grid.x * spacingX + spacingX;
    float gyMin = grid.y * spacingY;
    float gyMax = grid.y * spacingY + spacingY;
    float gzMin = grid.z * spacingZ;
    float gzMax = grid.z * spacingZ + spacingZ;
    int rightStep = ceil((_Range - (gxMax - pos.x)) / spacingX);
    int leftStep = ceil((_Range - (pos.x - gxMin)) / spacingX);
    int upStep = ceil((_Range - (gyMin - pos.y)) / spacingY);
    int downStep = ceil((_Range - (pos.y - gyMax)) / spacingY);
    int frontStep = ceil((_Range - (gzMax - pos.z)) / spacingZ);
    int backStep = ceil((_Range - (pos.z - gzMin)) / spacingZ);

    if (_NeighborMode == 0)
    {
        for (int z = max(grid.z - backStep, 0); z <= min(grid.z + frontStep, _GridNumZ - 1); z++)
        {
            for (int y = max(grid.y - downStep, 0); y <= min(grid.y + upStep, _GridNumY - 1); y++)
            {
                for (int x = max(grid.x - leftStep, 0); x <= min(grid.x + rightStep, _GridNumX - 1); x++)
                {
                    //if (!Intersect(_Range, pos, x * spacingX, (x + 1) * spacingX, (y + 1) * spacingY, y * spacingY, (z + 1) * spacingZ, z * spacingZ)) continue;
                    int gid = GridToGridID(uint3(x, y, z), _GridNumX, _GridNumY);
                    int start = _GridTable[gid].x;
                    int end = _GridTable[gid].y;
                    for (int i = start; i <= end; i++)
                    {
                        float3 pPos = _ParticleBuffer[i].position - float3(_BoundaryXMin, _BoundaryYMin, _BoundaryZMin);
                        if (length(pPos - pos) <= _Range)
                            _ParticleBuffer[i].color = float3(0, 0, 1);
                    }
                }
            }
        }
    }
    else if (_NeighborMode == 1)
    {
        for (int z = max(grid.z - 1, 0); z <= min(grid.z + 1, _GridNumZ - 1); z++)
        {
            for (int y = max(grid.y - 1, 0); y <= min(grid.y + 1, _GridNumY - 1); y++)
            {
                for (int x = max(grid.x - 1, 0); x <= min(grid.x + 1, _GridNumX - 1); x++)
                {
                    int gid = GridToGridID(uint3(x, y, z), _GridNumX, _GridNumY);
                    int start = _GridTable[gid].x;
                    int end = _GridTable[gid].y;
                    if (gid == GridToGridID(grid, _GridNumX, _GridNumY))
                    {
                        for (int i = start; i <= end; i++)
                            _ParticleBuffer[i].color = float3(0, 0, 1);
                    }
                    else
                    {
                        for (int i = start; i <= end; i++)
                            _ParticleBuffer[i].color = float3(1, 0, 0);
                    }
                }
            }
        }
    }
}

[numthreads(BITONIC_BLOCK_SIZE, 1, 1)]
void MakeParticleGridPair(uint3 id : SV_DispatchThreadID)
{
    Data p = _ParticleBuffer[id.x];
    float spacingX = (_BoundaryXMax - _BoundaryXMin) / (float)_GridNumX;
    float spacingY = (_BoundaryYMax - _BoundaryYMin) / (float)_GridNumY;
    float spacingZ = (_BoundaryZMax - _BoundaryZMin) / (float)_GridNumZ;

    uint3 grid = PositionToGrid(p.position, float3(spacingX, spacingY, spacingZ), float3(_BoundaryXMin, _BoundaryYMin, _BoundaryZMin));
    uint gridID = GridToGridID(grid, _GridNumX, _GridNumY);
    _ParticleGridPair[id.x] = uint2(gridID, id.x);
}

[numthreads(BITONIC_BLOCK_SIZE, 1, 1)]
void ResetGridLookUpTable(uint3 id : SV_DispatchThreadID)
{
    _GridTable[id.x] = uint2(0, 0);
}

[numthreads(BITONIC_BLOCK_SIZE, 1, 1)]
void MakeGridLookUpTable(uint3 id : SV_DispatchThreadID)
{
    int currIndex = id.x;
    int prevIndex = id.x - 1 < 0 ? _ParticleNum - 1 : id.x - 1;
    int nextIndex = id.x + 1 > _ParticleNum - 1 ? 0 : id.x + 1;
    int currGrid = _ParticleGridPair[currIndex].x;
    int prevGrid = _ParticleGridPair[prevIndex].x;
    int nextGrid = _ParticleGridPair[nextIndex].x;
    if (currGrid != prevGrid) _GridTable[currGrid].x = currIndex;
    if (currGrid != nextGrid) _GridTable[currGrid].y = currIndex;
}

[numthreads(BITONIC_BLOCK_SIZE, 1, 1)]
void RearrangeParticle(uint3 id : SV_DispatchThreadID)
{
    int newID = _ParticleGridPair[id.x].y;
    _ParticleBuffer[id.x] = _ReadParticleBuffer[newID];
}

[numthreads(BITONIC_BLOCK_SIZE, 1, 1)]
void Debug(uint3 id : SV_DispatchThreadID)
{
    Data p = _ParticleBuffer[id.x];

    // assign grid id to particle color
    uint gridID = _ParticleGridPair[id.x].x;
    uint3 grid = GridIDToGrid(gridID, _GridNumX, _GridNumY);
    p.color = float3(grid.x/(float)_GridNumX, grid.y/(float)_GridNumY, grid.z/(float)_GridNumZ);

    _ParticleBuffer[id.x] = p;

}

